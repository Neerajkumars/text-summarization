package edu.research.textSummarization.gui;
import java.util.ArrayList;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JTextArea;
import javax.swing.JTextField;

import edu.research.textSummarization.controller.Sentence;
import edu.research.textSummarization.controller.SentenceManager;
public class TextSummarizerGUI extends JFrame{
    private static TextSummarizerGUI me=null;
    private String mSaveFilePath="";
    /** Creates new form TextSummarizerGUI */
    public TextSummarizerGUI() {
        initComponents();
    me=this;
    }
    public static TextSummarizerGUI getInstance(){
    return me;
    }
    /**This method is called from within the constructor to
    *initialize the form.
    *WARNING: Do NOT modify this code.The content of this method is 
    *always regenerated by the Form Editor.
    */
    //<editor-forld defaultstate="collapsed" desc="Generated Code">//GEN-
    //BEGIN:initComponents
    private void initComponents() {


        JScrollPane jScrollPane = new JScrollPane();
        JTextArea txtInput = new JTextArea();
        JLabel jLabel2 = new JLabel();
        JScrollPane jScrollPane2 = new JScrollPane();
        JTextArea txtSummarizedText = new JTextArea();
        JLabel jLabel3 = new JLabel();
        JPanel jLabel1 = new JPanel();
        JButton btnSummarize = new JButton();
        JComboBox cmbSummarySize = new JComboBox();
        JLabel jLabel4 = new JLabel();
        JTextField txtSaveFile = new JTextField();
        JButton jButton2 = new JButton();
        JMenuBar jMenuBar1 = new JMenuBar();
        JMenu jMenu1 = new JMenu();
        JMenuItem jMenuItem1 = new JMenuItem();
        JSeparator jSeparator1 = new JSeparator();
        JMenuItem jMenuItem3 = new JMenuItem();
        JMenuItem jMenuItem2 = new JMenuItem();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("Text Summarizer");
    setAlwaysOnTop(true);

    } 
    //} 
    //System.out.println("after removing redundancy summarysize="+summary.size());
   // return summary;
   // }
    private Sentence getExtraSentence(Sentence sentenceA,Sentence sentenceB)
    {
    int originalNoOfSentenceA=sentenceA.getSentenceNo();
    int originalNoOfSentenceB=sentenceB.getSentenceNo();
    if(originalNoOfSentenceA>originalNoOfSentenceB)
    {
    throw new IllegalStateException("illegal state inside getExtrasentence");
    }
    for(int sentenceNo=originalNoOfSentenceA+1;sentenceNo<originalNoOfSentenceB;sentenceNo++)
    {
    Sentence middleSentence=SentenceManager.getInstance().getSentence(sentenceNo);
    double cosineValueA=getCosineValue(sentenceA.getSentenceText(), middleSentence.getSentenceText());
    double cosineValueB=getCosineValue(middleSentence.getSentenceText(),sentenceB.getSentenceText());
    if(cosineValueA>=0.3&&cosineValueB>=0.3)
    {
    System.out.println("SentenceA="+sentenceA.getSentenceText()+sentenceA.getSentenceNo());
    System.out.println("SentenceB="+sentenceB.getSentenceText()+sentenceB.getSentenceNo());
    System.out.println("EXTRA==="+middleSentence.getSentenceText()+middleSentence.getSentenceNo());
    return  middleSentence;
    }
    }
    return null;
    }
    private ArrayList removeDiscontinuity(ArrayList summary)
    {
    System.out.println("before removing discontinuity summary size="+summary.size());
    ArrayList newSummary=new ArrayList();
    for(int i=0;i<summary.size()-1;i++)
    {
    Sentence sentenceA=(Sentence)summary.get(i);
    Sentence sentenceB=(Sentence)summary.get(i+1);
    if(getCosineValue(sentenceA.getSentenceText(),sentenceB.getSentenceText())>0.3)
    {
    if(!newSummary.contains(sentenceA))
    newSummary.add(sentenceA);
    if(!newSummary.contains(sentenceB))
    newSummary.add(sentenceB);
    continue;
    }
    if(sentenceA==null || sentenceB==null)
    {
    throw new IllegalStateException("some illegal state inside removeDiscontinuity due to logic error");
    }
    if(!newSummary.contains(sentenceA))
    newSummary.add(sentenceA);
    Sentence extraSentence=getExtraSentence(sentenceA,sentenceB);
    if(extraSentence!=null)
    {
    if(!newSummary.contains(extraSentence))
    newSummary.add(extraSentence);
    }
    if(!newSummary.contains(sentenceB))
    newSummary.add(sentenceB);
    }
    System.out.println("after removing discontinuity summary size="+newSummary.size());
    return newSummary;
    }
    private double getCosineValue(String sentanceA, String sentanceB)
    {
    if(sentanceA==null || sentanceB==null)
    {
    throw new NullPointerException("inside getCosine() null parameter");
    }
    if(sentanceA.equals("")||sentanceB.equals(""))
    return 0.0;
    double cosineValue=0.0;
    int count=0;
    String[] sentanceWordA=sentanceA.split("[-");
    String[] sentanceWordB=sentanceB.split("[-");

    for(String SWA:sentanceWordA)
    {
    for(String SWB:sentanceWordB)
    if(SWA.equals(SWB))
    {
    count++;
    break;
    }
    }
    cosineValue=(count)/(Math.sqrt(sentanceWordA.length)*Math.sqrt(sentanceWordB.length));
    return cosineValue;
    }
    public static void main(String[] args)
    {
    /*Postprocessor pp=new PostProcessor();
    String s1="Ram is a good boy";
    String s2="Shyam is a bad boy";
    System.out.println("cosineValue==="+pp.getCosineValue(s1,s2));*/
    }
}
